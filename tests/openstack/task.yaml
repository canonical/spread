summary: Test the openstack backend.

systems: [ubuntu-22.04-64-devstack]

kill-timeout: 30m

prepare: |
    if [ ! -f .spread-reuse.yaml ]; then
        touch /run/spread-reuse.yaml
        ln -s /run/spread-reuse.yaml .spread-reuse.yaml
    fi

    sudo -u stack -i /opt/stack/devstack/unstack.sh
    sudo -u stack -i /opt/stack/devstack/stack.sh

execute: |
    # Check no servers running
    test -z "$(openstack server list)"

    # Check the instances which cannot be accessed are discarded
    # The instance was created and the status has to be active to
    # fail trying to access through ssh
    ! spread openstack:cirros-64: -v -reuse -resend &> task.out
    grep 'Allocating openstack:cirros-64' task.out
    grep 'cannot find ready marker in console output for.*: timeout reached' task.out

    # Check that the server is discarded during the spread execution
    for i in $(seq 10); do
        if [ -z "$(openstack server list)" ]; then
            break
        fi
        sleep 1
    done
    test -z "$(openstack server list)"

    # check the authentication method can be updated
    echo -e "OS_ACCESS_KEY=test\nOS_SECRET_KEY=test" > test.env
    ! SPREAD_OPENSTACK_ENV=test.env spread openstack:cirros-64: -v -reuse -resend &> task.out
    grep 'Allocating openstack:cirros-64' task.out
    grep 'cannot authenticate' task.out
    rm test.env

    # Check the error in case the network does not exist
    ! spread openstack:cirros-64-wrong-network: -v -reuse -resend &> task.out
    grep 'cannot find valid network with name "invalid"' task.out
    test -z "$(openstack server list)"

    # Check the error in case the group does not exist
    ! spread openstack:cirros-64-wrong-group: -v -reuse -resend &> task.out
    grep 'cannot find valid group with name "invalid"' task.out
    test -z "$(openstack server list)"

    # Check the error in case the image does not exist
    ! spread openstack:cirros-64-wrong-image: -v -reuse -resend &> task.out
    grep 'cannot find matching image for "invalid"' task.out
    test -z "$(openstack server list)"

    # Check the error in case the group does not exist
    ! spread openstack:cirros-64-wrong-plan: -v -reuse -resend &> task.out
    grep 'cannot find valid flavor with name "invalid"' task.out
    test -z "$(openstack server list)"

    # Check errors with environment variables
    OS_REGION_NAME=wrong spread openstack:cirros-64: -v -reuse -resend &> task.out  || true
    grep 'cannot authenticate: invalid region "wrong"' task.out
    OS_PASSWORD=wrong spread openstack:cirros-64: -v -reuse -resend &> task.out  || true
    grep 'cannot authenticate:.*returned unexpected status: 401' task.out
    OS_USERNAME=wrong spread openstack:cirros-64: -v -reuse -resend &> task.out  || true
    grep 'cannot authenticate:.*returned unexpected status: 401' task.out
    OS_IDENTITY_API_VERSION=2 spread openstack:cirros-64: -v -reuse -resend &> task.out  || true
    grep -E 'cannot authenticate:.*returned unexpected status: 404' task.out

    # trigger 1 instance and check it can be listed and the garbage collect works
    test "0" = "$(spread -gc | grep -c "Checking openstack instance")"
    spread openstack:cirros-64: &>/dev/null &

    for _ in $(seq 10); do
        if [ -n "$(openstack server list)" ]; then
            break
        fi
        sleep 1
    done

    # first check that the halt-timeout tag from the instance is used
    # properties just can be set when the server is in ACTIVE status
    SERVER_ID="$(openstack server list -f value | head -n1 | awk '{ print $1 }')"
    test -n "$SERVER_ID"
    for _ in $(seq 20); do
        if openstack server show "$SERVER_ID" -f shell | MATCH 'status="ACTIVE"'; then
            break
        fi
        sleep 1
    done
    openstack server show "$SERVER_ID" -f shell | MATCH 'status="ACTIVE"'
    openstack server set --property halt-timeout=1h "$SERVER_ID"
    test "0" = "$(spread -gc | grep -c 'exceeds halt-timeout')"
    test "1" = "$(spread -gc | grep -c 'Checking openstack instance')"
    openstack server unset --property halt-timeout "$SERVER_ID"

    # then check the backend halt-timeout tag from the instance is used
    # the halt-timeout is set to 1s for the backend in the spread.yaml
    test "1" = "$(spread -gc | grep -c 'exceeds halt-timeout')"
    for _ in $(seq 5); do
        if [ -z "$(openstack server list)" ]; then
            break
        fi
        sleep 1
    done
    test "0" = "$(spread -gc | grep -c "Checking openstack instance")"

debug: |
    cat task.out || true
